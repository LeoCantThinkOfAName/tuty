{"version":3,"file":"index-aa5bf380.js","sources":["../../src/components/InputGroup/contexts/InputGroupContext.ts","../../src/components/InputGroup/components/InputGroupItem.tsx","../../src/components/InputGroup/components/InputGroup.tsx"],"sourcesContent":["import { InputGroupContext } from \"../types/type\";\nimport { createContext } from \"react\";\n\nexport const InputGroupContextImp = createContext<InputGroupContext>({\n  value: [],\n  setValue: () => {},\n});\n\nInputGroupContextImp.displayName = \"InputGroupContext\";\n","import { Input, InputProps } from \"@chakra-ui/react\";\nimport {\n  MutableRefObject,\n  forwardRef,\n  useContext,\n  useEffect,\n  useRef,\n} from \"react\";\n\nimport { InputGroupContextImp } from \"../contexts/InputGroupContext\";\n\nexport interface InputGroupItemProps extends InputProps {\n  index?: number;\n}\n\nconst InputGroupItem = forwardRef<\n  HTMLInputElement | undefined,\n  InputGroupItemProps\n>(({ index, ...props }, ref) => {\n  const _ref = useRef<HTMLInputElement>();\n  const inputRef = (ref ?? _ref) as MutableRefObject<HTMLInputElement>;\n  const { setValue } = useContext(InputGroupContextImp);\n\n  useEffect(() => {\n    const setGroupValue = (e: Event | { target: HTMLInputElement }) => {\n      setValue((prev) => {\n        const newValue = [...prev];\n        newValue[index as number] = (e.target as HTMLInputElement).value;\n        return newValue;\n      });\n    };\n\n    // initialize default value\n    setGroupValue({ target: inputRef.current });\n\n    inputRef.current?.addEventListener(\"input\", setGroupValue);\n\n    return () => {\n      inputRef.current?.removeEventListener(\"input\", setGroupValue);\n    };\n  }, []);\n\n  return <Input {...props} ref={inputRef} aria-label=\"grouped-input\" />;\n});\n\nInputGroupItem.displayName = \"InputGroupItem\";\nexport default InputGroupItem;\n","import {\n  Children,\n  ReactElement,\n  cloneElement,\n  forwardRef,\n  isValidElement,\n  useMemo,\n  useState,\n} from \"react\";\nimport { Flex, FlexProps } from \"@chakra-ui/react\";\nimport InputGroupItem, { InputGroupItemProps } from \"./InputGroupItem\";\n\nimport { InputGroupContextImp } from \"../contexts/InputGroupContext\";\n\ninterface InputGroupProps extends FlexProps {\n  delimiter?: string;\n  name?: string;\n  hidden?: boolean;\n}\n\nconst InputGroup = forwardRef<HTMLInputElement, InputGroupProps>(\n  ({ children, delimiter, name, hidden, ...props }, ref) => {\n    const [value, setValue] = useState<string[]>([]);\n    const validChildren = Children.map(children, (child, index) => {\n      const isValid = isValidElement(child);\n      if (!isValid) {\n        console.warn(\"Please provide valid child element\");\n        return null;\n      }\n      if (child.type !== InputGroupItem) {\n        console.warn(\"InputGroup only accept InputGroupItem as children\");\n        return null;\n      }\n\n      return cloneElement(\n        child as ReactElement<InputGroupItemProps>,\n        index !== 0 ? { ml: \"3\", index } : { index },\n      );\n    });\n    const contextValue = useMemo(() => ({ value, setValue }), [value]);\n\n    return (\n      <InputGroupContextImp.Provider value={contextValue}>\n        <input\n          type=\"text\"\n          value={value.join(delimiter)}\n          readOnly\n          ref={ref}\n          name={name}\n          hidden={hidden}\n        />\n        <Flex justifyContent=\"space-between\" {...props}>\n          {validChildren}\n        </Flex>\n      </InputGroupContextImp.Provider>\n    );\n  },\n);\n\nInputGroup.displayName = \"InputGroup\";\nInputGroup.defaultProps = {\n  delimiter: \"\",\n  hidden: true,\n};\nexport default InputGroup;\n"],"names":["InputGroupContextImp","createContext","InputGroupItem","forwardRef","index","props","ref","_ref","useRef","inputRef","setValue","useContext","useEffect","setGroupValue","e","prev","newValue","_a","jsx","Input","InputGroup","children","delimiter","name","hidden","value","useState","validChildren","Children","child","isValidElement","cloneElement","contextValue","useMemo","jsxs","Flex"],"mappings":"wLAGO,MAAMA,EAAuBC,EAAAA,cAAiC,CACnE,MAAO,CAAC,EACR,SAAU,IAAM,CAAC,CACnB,CAAC,EAEDD,EAAqB,YAAc,oBCOnC,MAAAE,EAAAC,EAAA,WAAA,CAAA,CAAA,MAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIE,MAAAC,EAAAC,EAAAA,SACAC,EAAAH,GAAAC,EACA,CAAA,SAAAG,CAAA,EAAAC,EAAA,WAAAX,CAAA,EAEAY,OAAAA,EAAAA,UAAA,IAAA,OACE,MAAAC,EAAAC,GAAA,CACEJ,EAAAK,GAAA,CACE,MAAAC,EAAA,CAAA,GAAAD,CAAA,EACA,OAAAC,EAAAZ,CAAA,EAAAU,EAAA,OAAA,MACAE,CAAO,CAAA,CACR,EAIH,OAAAH,EAAA,CAAA,OAAAJ,EAAA,OAAA,CAAA,GAEAQ,EAAAR,EAAA,UAAA,MAAAQ,EAAA,iBAAA,QAAAJ,GAEA,IAAA,QACEI,EAAAR,EAAA,UAAA,MAAAQ,EAAA,oBAAA,QAAAJ,EAA4D,CAC9D,EAAA,CAAA,CAAA,EAGFK,EAAA,IAAAC,EAAA,CAAA,GAAAd,EAAA,IAAAI,EAAA,aAAA,eAAA,CAAA,CACF,CAAA,EAEAP,EAAA,YAAA,k6YCzBA,MAAAkB,EAAAjB,EAAA,WAAmB,CAAA,CAAA,SAAAkB,EAAA,UAAAC,EAAA,KAAAC,EAAA,OAAAC,EAAA,GAAAnB,CAAA,EAAAC,IAAA,CAEf,KAAA,CAAAmB,EAAAf,CAAA,EAAAgB,EAAA,SAAA,CAAA,CAAA,EACAC,EAAAC,EAAAA,SAAA,IAAAP,EAAA,CAAAQ,EAAAzB,IACE0B,iBAAAD,CAAA,EAKAA,EAAA,OAAA3B,GACE,QAAA,KAAA,mDAAA,EACA,MAGF6B,EAAA,aAAOF,EACLzB,IAAA,EAAA,CAAA,GAAA,IAAA,MAAAA,CAAA,EAAA,CAAA,MAAAA,CAAA,CAC2C,GAV3C,QAAA,KAAA,oCAAA,EACA,KAUF,EAEF4B,EAAAC,EAAA,QAAA,KAAA,CAAA,MAAAR,EAAA,SAAAf,IAAA,CAAAe,CAAA,CAAA,EAEA,OAAAS,EAAAA,KAAAlC,EAAA,SAAA,CAAA,MAAAgC,EAAA,SAAA,CAEId,EAAA,IAAA,QAAC,CAAA,KAAA,OACM,MAAAO,EAAA,KAAAH,CAAA,EACsB,SAAA,GACnB,IAAAhB,EACR,KAAAiB,EACA,OAAAC,CACA,CAAA,EACFN,MAAAiB,EAAA,CAAA,eAAA,gBAAA,GAAA9B,EAAA,SAAAsB,EAAA,CAGA,CAAA,CAAA,CACF,CAGN,EAEAP,EAAA,YAAA,aACAA,EAAA,aAAA,CAA0B,UAAA,GACb,OAAA,EAEb"}